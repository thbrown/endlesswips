{"version":3,"file":"ffe02d996b01ef51ba09968f50dcc1350de5e687-8691039070d8f93f8b1d.js","mappings":"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","sources":["webpack://endlesswips/./node_modules/crypto-js/core.js","webpack://endlesswips/./node_modules/crypto-js/enc-base64.js","webpack://endlesswips/./node_modules/crypto-js/sha256.js","webpack://endlesswips/./node_modules/core-js/modules/es.global-this.js","webpack://endlesswips/./node_modules/core-js/modules/esnext.global-this.js","webpack://endlesswips/./src/components/kaleidoscope-coloring.js"],"sourcesContent":["require(\"core-js/modules/esnext.global-this.js\");\n\n;\n\n(function (root, factory) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory();\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([], factory);\n  } else {\n    // Global (browser)\n    root.CryptoJS = factory();\n  }\n})(this, function () {\n  /*globals window, global, require*/\n\n  /**\n   * CryptoJS core components.\n   */\n  var CryptoJS = CryptoJS || function (Math, undefined) {\n    var crypto; // Native crypto from window (Browser)\n\n    if (typeof window !== 'undefined' && window.crypto) {\n      crypto = window.crypto;\n    } // Native crypto in web worker (Browser)\n\n\n    if (typeof self !== 'undefined' && self.crypto) {\n      crypto = self.crypto;\n    } // Native crypto from worker\n\n\n    if (typeof globalThis !== 'undefined' && globalThis.crypto) {\n      crypto = globalThis.crypto;\n    } // Native (experimental IE 11) crypto from window (Browser)\n\n\n    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {\n      crypto = window.msCrypto;\n    } // Native crypto from global (NodeJS)\n\n\n    if (!crypto && typeof global !== 'undefined' && global.crypto) {\n      crypto = global.crypto;\n    } // Native crypto import via require (NodeJS)\n\n\n    if (!crypto && typeof require === 'function') {\n      try {\n        crypto = require('crypto');\n      } catch (err) {}\n    }\n    /*\n     * Cryptographically secure pseudorandom number generator\n     *\n     * As Math.random() is cryptographically not safe to use\n     */\n\n\n    var cryptoSecureRandomInt = function cryptoSecureRandomInt() {\n      if (crypto) {\n        // Use getRandomValues method (Browser)\n        if (typeof crypto.getRandomValues === 'function') {\n          try {\n            return crypto.getRandomValues(new Uint32Array(1))[0];\n          } catch (err) {}\n        } // Use randomBytes method (NodeJS)\n\n\n        if (typeof crypto.randomBytes === 'function') {\n          try {\n            return crypto.randomBytes(4).readInt32LE();\n          } catch (err) {}\n        }\n      }\n\n      throw new Error('Native crypto module could not be used to get secure random number.');\n    };\n    /*\n     * Local polyfill of Object.create\n      */\n\n\n    var create = Object.create || function () {\n      function F() {}\n\n      return function (obj) {\n        var subtype;\n        F.prototype = obj;\n        subtype = new F();\n        F.prototype = null;\n        return subtype;\n      };\n    }();\n    /**\n     * CryptoJS namespace.\n     */\n\n\n    var C = {};\n    /**\n     * Library namespace.\n     */\n\n    var C_lib = C.lib = {};\n    /**\n     * Base object for prototypal inheritance.\n     */\n\n    var Base = C_lib.Base = function () {\n      return {\n        /**\n         * Creates a new object that inherits from this object.\n         *\n         * @param {Object} overrides Properties to copy into the new object.\n         *\n         * @return {Object} The new object.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var MyType = CryptoJS.lib.Base.extend({\n         *         field: 'value',\n         *\n         *         method: function () {\n         *         }\n         *     });\n         */\n        extend: function extend(overrides) {\n          // Spawn\n          var subtype = create(this); // Augment\n\n          if (overrides) {\n            subtype.mixIn(overrides);\n          } // Create default initializer\n\n\n          if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n            subtype.init = function () {\n              subtype.$super.init.apply(this, arguments);\n            };\n          } // Initializer's prototype is the subtype object\n\n\n          subtype.init.prototype = subtype; // Reference supertype\n\n          subtype.$super = this;\n          return subtype;\n        },\n\n        /**\n         * Extends this object and runs the init method.\n         * Arguments to create() will be passed to init().\n         *\n         * @return {Object} The new object.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var instance = MyType.create();\n         */\n        create: function create() {\n          var instance = this.extend();\n          instance.init.apply(instance, arguments);\n          return instance;\n        },\n\n        /**\n         * Initializes a newly created object.\n         * Override this method to add some logic when your objects are created.\n         *\n         * @example\n         *\n         *     var MyType = CryptoJS.lib.Base.extend({\n         *         init: function () {\n         *             // ...\n         *         }\n         *     });\n         */\n        init: function init() {},\n\n        /**\n         * Copies properties into this object.\n         *\n         * @param {Object} properties The properties to mix in.\n         *\n         * @example\n         *\n         *     MyType.mixIn({\n         *         field: 'value'\n         *     });\n         */\n        mixIn: function mixIn(properties) {\n          for (var propertyName in properties) {\n            if (properties.hasOwnProperty(propertyName)) {\n              this[propertyName] = properties[propertyName];\n            }\n          } // IE won't copy toString using the loop above\n\n\n          if (properties.hasOwnProperty('toString')) {\n            this.toString = properties.toString;\n          }\n        },\n\n        /**\n         * Creates a copy of this object.\n         *\n         * @return {Object} The clone.\n         *\n         * @example\n         *\n         *     var clone = instance.clone();\n         */\n        clone: function clone() {\n          return this.init.prototype.extend(this);\n        }\n      };\n    }();\n    /**\n     * An array of 32-bit words.\n     *\n     * @property {Array} words The array of 32-bit words.\n     * @property {number} sigBytes The number of significant bytes in this word array.\n     */\n\n\n    var WordArray = C_lib.WordArray = Base.extend({\n      /**\n       * Initializes a newly created word array.\n       *\n       * @param {Array} words (Optional) An array of 32-bit words.\n       * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n       *\n       * @example\n       *\n       *     var wordArray = CryptoJS.lib.WordArray.create();\n       *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n       *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n       */\n      init: function init(words, sigBytes) {\n        words = this.words = words || [];\n\n        if (sigBytes != undefined) {\n          this.sigBytes = sigBytes;\n        } else {\n          this.sigBytes = words.length * 4;\n        }\n      },\n\n      /**\n       * Converts this word array to a string.\n       *\n       * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n       *\n       * @return {string} The stringified word array.\n       *\n       * @example\n       *\n       *     var string = wordArray + '';\n       *     var string = wordArray.toString();\n       *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n       */\n      toString: function toString(encoder) {\n        return (encoder || Hex).stringify(this);\n      },\n\n      /**\n       * Concatenates a word array to this word array.\n       *\n       * @param {WordArray} wordArray The word array to append.\n       *\n       * @return {WordArray} This word array.\n       *\n       * @example\n       *\n       *     wordArray1.concat(wordArray2);\n       */\n      concat: function concat(wordArray) {\n        // Shortcuts\n        var thisWords = this.words;\n        var thatWords = wordArray.words;\n        var thisSigBytes = this.sigBytes;\n        var thatSigBytes = wordArray.sigBytes; // Clamp excess bits\n\n        this.clamp(); // Concat\n\n        if (thisSigBytes % 4) {\n          // Copy one byte at a time\n          for (var i = 0; i < thatSigBytes; i++) {\n            var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n            thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;\n          }\n        } else {\n          // Copy one word at a time\n          for (var j = 0; j < thatSigBytes; j += 4) {\n            thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];\n          }\n        }\n\n        this.sigBytes += thatSigBytes; // Chainable\n\n        return this;\n      },\n\n      /**\n       * Removes insignificant bits.\n       *\n       * @example\n       *\n       *     wordArray.clamp();\n       */\n      clamp: function clamp() {\n        // Shortcuts\n        var words = this.words;\n        var sigBytes = this.sigBytes; // Clamp\n\n        words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;\n        words.length = Math.ceil(sigBytes / 4);\n      },\n\n      /**\n       * Creates a copy of this word array.\n       *\n       * @return {WordArray} The clone.\n       *\n       * @example\n       *\n       *     var clone = wordArray.clone();\n       */\n      clone: function clone() {\n        var clone = Base.clone.call(this);\n        clone.words = this.words.slice(0);\n        return clone;\n      },\n\n      /**\n       * Creates a word array filled with random bytes.\n       *\n       * @param {number} nBytes The number of random bytes to generate.\n       *\n       * @return {WordArray} The random word array.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var wordArray = CryptoJS.lib.WordArray.random(16);\n       */\n      random: function random(nBytes) {\n        var words = [];\n\n        for (var i = 0; i < nBytes; i += 4) {\n          words.push(cryptoSecureRandomInt());\n        }\n\n        return new WordArray.init(words, nBytes);\n      }\n    });\n    /**\n     * Encoder namespace.\n     */\n\n    var C_enc = C.enc = {};\n    /**\n     * Hex encoding strategy.\n     */\n\n    var Hex = C_enc.Hex = {\n      /**\n       * Converts a word array to a hex string.\n       *\n       * @param {WordArray} wordArray The word array.\n       *\n       * @return {string} The hex string.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n       */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes; // Convert\n\n        var hexChars = [];\n\n        for (var i = 0; i < sigBytes; i++) {\n          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          hexChars.push((bite >>> 4).toString(16));\n          hexChars.push((bite & 0x0f).toString(16));\n        }\n\n        return hexChars.join('');\n      },\n\n      /**\n       * Converts a hex string to a word array.\n       *\n       * @param {string} hexStr The hex string.\n       *\n       * @return {WordArray} The word array.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n       */\n      parse: function parse(hexStr) {\n        // Shortcut\n        var hexStrLength = hexStr.length; // Convert\n\n        var words = [];\n\n        for (var i = 0; i < hexStrLength; i += 2) {\n          words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;\n        }\n\n        return new WordArray.init(words, hexStrLength / 2);\n      }\n    };\n    /**\n     * Latin1 encoding strategy.\n     */\n\n    var Latin1 = C_enc.Latin1 = {\n      /**\n       * Converts a word array to a Latin1 string.\n       *\n       * @param {WordArray} wordArray The word array.\n       *\n       * @return {string} The Latin1 string.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n       */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes; // Convert\n\n        var latin1Chars = [];\n\n        for (var i = 0; i < sigBytes; i++) {\n          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          latin1Chars.push(String.fromCharCode(bite));\n        }\n\n        return latin1Chars.join('');\n      },\n\n      /**\n       * Converts a Latin1 string to a word array.\n       *\n       * @param {string} latin1Str The Latin1 string.\n       *\n       * @return {WordArray} The word array.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n       */\n      parse: function parse(latin1Str) {\n        // Shortcut\n        var latin1StrLength = latin1Str.length; // Convert\n\n        var words = [];\n\n        for (var i = 0; i < latin1StrLength; i++) {\n          words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;\n        }\n\n        return new WordArray.init(words, latin1StrLength);\n      }\n    };\n    /**\n     * UTF-8 encoding strategy.\n     */\n\n    var Utf8 = C_enc.Utf8 = {\n      /**\n       * Converts a word array to a UTF-8 string.\n       *\n       * @param {WordArray} wordArray The word array.\n       *\n       * @return {string} The UTF-8 string.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n       */\n      stringify: function stringify(wordArray) {\n        try {\n          return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n        } catch (e) {\n          throw new Error('Malformed UTF-8 data');\n        }\n      },\n\n      /**\n       * Converts a UTF-8 string to a word array.\n       *\n       * @param {string} utf8Str The UTF-8 string.\n       *\n       * @return {WordArray} The word array.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n       */\n      parse: function parse(utf8Str) {\n        return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n      }\n    };\n    /**\n     * Abstract buffered block algorithm template.\n     *\n     * The property blockSize must be implemented in a concrete subtype.\n     *\n     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n     */\n\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n      /**\n       * Resets this block algorithm's data buffer to its initial state.\n       *\n       * @example\n       *\n       *     bufferedBlockAlgorithm.reset();\n       */\n      reset: function reset() {\n        // Initial values\n        this._data = new WordArray.init();\n        this._nDataBytes = 0;\n      },\n\n      /**\n       * Adds new data to this block algorithm's buffer.\n       *\n       * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n       *\n       * @example\n       *\n       *     bufferedBlockAlgorithm._append('data');\n       *     bufferedBlockAlgorithm._append(wordArray);\n       */\n      _append: function _append(data) {\n        // Convert string to WordArray, else assume WordArray already\n        if (typeof data == 'string') {\n          data = Utf8.parse(data);\n        } // Append\n\n\n        this._data.concat(data);\n\n        this._nDataBytes += data.sigBytes;\n      },\n\n      /**\n       * Processes available data blocks.\n       *\n       * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n       *\n       * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n       *\n       * @return {WordArray} The processed data.\n       *\n       * @example\n       *\n       *     var processedData = bufferedBlockAlgorithm._process();\n       *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n       */\n      _process: function _process(doFlush) {\n        var processedWords; // Shortcuts\n\n        var data = this._data;\n        var dataWords = data.words;\n        var dataSigBytes = data.sigBytes;\n        var blockSize = this.blockSize;\n        var blockSizeBytes = blockSize * 4; // Count blocks ready\n\n        var nBlocksReady = dataSigBytes / blockSizeBytes;\n\n        if (doFlush) {\n          // Round up to include partial blocks\n          nBlocksReady = Math.ceil(nBlocksReady);\n        } else {\n          // Round down to include only full blocks,\n          // less the number of blocks that must remain in the buffer\n          nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n        } // Count words ready\n\n\n        var nWordsReady = nBlocksReady * blockSize; // Count bytes ready\n\n        var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes); // Process blocks\n\n        if (nWordsReady) {\n          for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n            // Perform concrete-algorithm logic\n            this._doProcessBlock(dataWords, offset);\n          } // Remove processed words\n\n\n          processedWords = dataWords.splice(0, nWordsReady);\n          data.sigBytes -= nBytesReady;\n        } // Return processed words\n\n\n        return new WordArray.init(processedWords, nBytesReady);\n      },\n\n      /**\n       * Creates a copy of this object.\n       *\n       * @return {Object} The clone.\n       *\n       * @example\n       *\n       *     var clone = bufferedBlockAlgorithm.clone();\n       */\n      clone: function clone() {\n        var clone = Base.clone.call(this);\n        clone._data = this._data.clone();\n        return clone;\n      },\n      _minBufferSize: 0\n    });\n    /**\n     * Abstract hasher template.\n     *\n     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n     */\n\n    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n      /**\n       * Configuration options.\n       */\n      cfg: Base.extend(),\n\n      /**\n       * Initializes a newly created hasher.\n       *\n       * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n       *\n       * @example\n       *\n       *     var hasher = CryptoJS.algo.SHA256.create();\n       */\n      init: function init(cfg) {\n        // Apply config defaults\n        this.cfg = this.cfg.extend(cfg); // Set initial values\n\n        this.reset();\n      },\n\n      /**\n       * Resets this hasher to its initial state.\n       *\n       * @example\n       *\n       *     hasher.reset();\n       */\n      reset: function reset() {\n        // Reset data buffer\n        BufferedBlockAlgorithm.reset.call(this); // Perform concrete-hasher logic\n\n        this._doReset();\n      },\n\n      /**\n       * Updates this hasher with a message.\n       *\n       * @param {WordArray|string} messageUpdate The message to append.\n       *\n       * @return {Hasher} This hasher.\n       *\n       * @example\n       *\n       *     hasher.update('message');\n       *     hasher.update(wordArray);\n       */\n      update: function update(messageUpdate) {\n        // Append\n        this._append(messageUpdate); // Update the hash\n\n\n        this._process(); // Chainable\n\n\n        return this;\n      },\n\n      /**\n       * Finalizes the hash computation.\n       * Note that the finalize operation is effectively a destructive, read-once operation.\n       *\n       * @param {WordArray|string} messageUpdate (Optional) A final message update.\n       *\n       * @return {WordArray} The hash.\n       *\n       * @example\n       *\n       *     var hash = hasher.finalize();\n       *     var hash = hasher.finalize('message');\n       *     var hash = hasher.finalize(wordArray);\n       */\n      finalize: function finalize(messageUpdate) {\n        // Final message update\n        if (messageUpdate) {\n          this._append(messageUpdate);\n        } // Perform concrete-hasher logic\n\n\n        var hash = this._doFinalize();\n\n        return hash;\n      },\n      blockSize: 512 / 32,\n\n      /**\n       * Creates a shortcut function to a hasher's object interface.\n       *\n       * @param {Hasher} hasher The hasher to create a helper for.\n       *\n       * @return {Function} The shortcut function.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n       */\n      _createHelper: function _createHelper(hasher) {\n        return function (message, cfg) {\n          return new hasher.init(cfg).finalize(message);\n        };\n      },\n\n      /**\n       * Creates a shortcut function to the HMAC's object interface.\n       *\n       * @param {Hasher} hasher The hasher to use in this HMAC helper.\n       *\n       * @return {Function} The shortcut function.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n       */\n      _createHmacHelper: function _createHmacHelper(hasher) {\n        return function (message, key) {\n          return new C_algo.HMAC.init(hasher, key).finalize(message);\n        };\n      }\n    });\n    /**\n     * Algorithm namespace.\n     */\n\n    var C_algo = C.algo = {};\n    return C;\n  }(Math);\n\n  return CryptoJS;\n});",";\n\n(function (root, factory) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory(require(\"./core\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"./core\"], factory);\n  } else {\n    // Global (browser)\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n    /**\n     * Base64 encoding strategy.\n     */\n\n    var Base64 = C_enc.Base64 = {\n      /**\n       * Converts a word array to a Base64 string.\n       *\n       * @param {WordArray} wordArray The word array.\n       *\n       * @return {string} The Base64 string.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n       */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n        var map = this._map; // Clamp excess bits\n\n        wordArray.clamp(); // Convert\n\n        var base64Chars = [];\n\n        for (var i = 0; i < sigBytes; i += 3) {\n          var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;\n          var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;\n          var triplet = byte1 << 16 | byte2 << 8 | byte3;\n\n          for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {\n            base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));\n          }\n        } // Add padding\n\n\n        var paddingChar = map.charAt(64);\n\n        if (paddingChar) {\n          while (base64Chars.length % 4) {\n            base64Chars.push(paddingChar);\n          }\n        }\n\n        return base64Chars.join('');\n      },\n\n      /**\n       * Converts a Base64 string to a word array.\n       *\n       * @param {string} base64Str The Base64 string.\n       *\n       * @return {WordArray} The word array.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n       */\n      parse: function parse(base64Str) {\n        // Shortcuts\n        var base64StrLength = base64Str.length;\n        var map = this._map;\n        var reverseMap = this._reverseMap;\n\n        if (!reverseMap) {\n          reverseMap = this._reverseMap = [];\n\n          for (var j = 0; j < map.length; j++) {\n            reverseMap[map.charCodeAt(j)] = j;\n          }\n        } // Ignore padding\n\n\n        var paddingChar = map.charAt(64);\n\n        if (paddingChar) {\n          var paddingIndex = base64Str.indexOf(paddingChar);\n\n          if (paddingIndex !== -1) {\n            base64StrLength = paddingIndex;\n          }\n        } // Convert\n\n\n        return parseLoop(base64Str, base64StrLength, reverseMap);\n      },\n      _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n    };\n\n    function parseLoop(base64Str, base64StrLength, reverseMap) {\n      var words = [];\n      var nBytes = 0;\n\n      for (var i = 0; i < base64StrLength; i++) {\n        if (i % 4) {\n          var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;\n          var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;\n          var bitsCombined = bits1 | bits2;\n          words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;\n          nBytes++;\n        }\n      }\n\n      return WordArray.create(words, nBytes);\n    }\n  })();\n\n  return CryptoJS.enc.Base64;\n});",";\n\n(function (root, factory) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory(require(\"./core\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"./core\"], factory);\n  } else {\n    // Global (browser)\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  (function (Math) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo; // Initialization and round constants tables\n\n    var H = [];\n    var K = []; // Compute constants\n\n    (function () {\n      function isPrime(n) {\n        var sqrtN = Math.sqrt(n);\n\n        for (var factor = 2; factor <= sqrtN; factor++) {\n          if (!(n % factor)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      function getFractionalBits(n) {\n        return (n - (n | 0)) * 0x100000000 | 0;\n      }\n\n      var n = 2;\n      var nPrime = 0;\n\n      while (nPrime < 64) {\n        if (isPrime(n)) {\n          if (nPrime < 8) {\n            H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n          }\n\n          K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n          nPrime++;\n        }\n\n        n++;\n      }\n    })(); // Reusable object\n\n\n    var W = [];\n    /**\n     * SHA-256 hash algorithm.\n     */\n\n    var SHA256 = C_algo.SHA256 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = new WordArray.init(H.slice(0));\n      },\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcut\n        var H = this._hash.words; // Working variables\n\n        var a = H[0];\n        var b = H[1];\n        var c = H[2];\n        var d = H[3];\n        var e = H[4];\n        var f = H[5];\n        var g = H[6];\n        var h = H[7]; // Computation\n\n        for (var i = 0; i < 64; i++) {\n          if (i < 16) {\n            W[i] = M[offset + i] | 0;\n          } else {\n            var gamma0x = W[i - 15];\n            var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;\n            var gamma1x = W[i - 2];\n            var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;\n            W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n          }\n\n          var ch = e & f ^ ~e & g;\n          var maj = a & b ^ a & c ^ b & c;\n          var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);\n          var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);\n          var t1 = h + sigma1 + ch + K[i] + W[i];\n          var t2 = sigma0 + maj;\n          h = g;\n          g = f;\n          f = e;\n          e = d + t1 | 0;\n          d = c;\n          c = b;\n          b = a;\n          a = t1 + t2 | 0;\n        } // Intermediate hash value\n\n\n        H[0] = H[0] + a | 0;\n        H[1] = H[1] + b | 0;\n        H[2] = H[2] + c | 0;\n        H[3] = H[3] + d | 0;\n        H[4] = H[4] + e | 0;\n        H[5] = H[5] + f | 0;\n        H[6] = H[6] + g | 0;\n        H[7] = H[7] + h | 0;\n      },\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8; // Add padding\n\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;\n        data.sigBytes = dataWords.length * 4; // Hash final blocks\n\n        this._process(); // Return final computed hash\n\n\n        return this._hash;\n      },\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n        return clone;\n      }\n    });\n    /**\n     * Shortcut function to the hasher's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     *\n     * @return {WordArray} The hash.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hash = CryptoJS.SHA256('message');\n     *     var hash = CryptoJS.SHA256(wordArray);\n     */\n\n    C.SHA256 = Hasher._createHelper(SHA256);\n    /**\n     * Shortcut function to the HMAC's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     * @param {WordArray|string} key The secret key.\n     *\n     * @return {WordArray} The HMAC.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hmac = CryptoJS.HmacSHA256(message, key);\n     */\n\n    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n  })(Math);\n\n  return CryptoJS.SHA256;\n});","var $ = require('../internals/export');\nvar global = require('../internals/global');\n\n// `globalThis` object\n// https://tc39.es/ecma262/#sec-globalthis\n$({ global: true }, {\n  globalThis: global\n});\n","// TODO: Remove from `core-js@4`\nrequire('../modules/es.global-this');\n","import React from \"react\";\r\n\r\nimport { Component } from \"react\";\r\n\r\nimport Utils from \"../helpers/utils\";\r\n\r\nimport sha256 from \"crypto-js/sha256\";\r\nimport Base64 from \"crypto-js/enc-base64\";\r\n\r\nconst COLORS = [\r\n  \"#ff0000\",\r\n  \"#ff6000\",\r\n  \"#ffc000\",\r\n  \"#deff00\",\r\n  \"#1eff00\",\r\n  \"#7eff00\",\r\n  \"#00ff42\",\r\n  \"#00ffa2\",\r\n  \"#00fcff\",\r\n  \"#00a2ff\",\r\n  \"#0042ff\",\r\n  \"#1e00ff\",\r\n  \"#7e00ff\",\r\n  \"#de00ff\",\r\n  \"#ff00c0\",\r\n  \"#ff0060\",\r\n];\r\nconst SHAPES = [3, 4, 5, 6, 7, 8, 9, 100];\r\nconst DISPLAY_MAX_X = 700;\r\nconst DISPLAY_MAX_Y = 700;\r\n\r\nclass KaleidoscopeColoring extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.canvasRef = React.createRef();\r\n\r\n    this.CANVAS_MAX_X = DISPLAY_MAX_X * this.props.quality;\r\n    this.CANVAS_MAX_Y = DISPLAY_MAX_Y * this.props.quality;\r\n    this.THICKNESS = 5 * this.props.quality;\r\n  }\r\n\r\n  drawShape(ctx, color, distance, sides, originX, originY, outline, thickness) {\r\n    ctx.beginPath();\r\n    const angle = (2 * Math.PI) / sides;\r\n    for (let s = 0; s < sides; s++) {\r\n      let x = distance * Math.sin(s * angle);\r\n      let y = distance * Math.cos(s * angle);\r\n      ctx.lineTo(x + originX, y + originY);\r\n    }\r\n    ctx.fillStyle = color;\r\n    ctx.fill();\r\n\r\n    if (outline) {\r\n      ctx.beginPath();\r\n\r\n      // Adjust thickness for different shapes. Circles (100 sides) are super thin, so we'll use a max angle of Math.PI / 4 to make it look good.\r\n      thickness =\r\n        thickness * Math.sin(Math.PI - Math.max(angle, Math.PI / 4) / 2);\r\n\r\n      for (let s = 0; s < sides; s++) {\r\n        let angle = (2 * Math.PI) / sides;\r\n        let x = (distance - thickness) * Math.sin(s * angle);\r\n        let y = (distance - thickness) * Math.cos(s * angle);\r\n        ctx.lineTo(x + originX, y + originY);\r\n      }\r\n      ctx.fillStyle = \"white\";\r\n      ctx.fill();\r\n    }\r\n  }\r\n\r\n  clipShape(ctx, distance, sides, originX, originY) {\r\n    ctx.beginPath();\r\n    for (let s = 0; s < sides; s++) {\r\n      let angle = (2 * Math.PI) / sides;\r\n      let x = distance * Math.sin(s * angle);\r\n      let y = distance * Math.cos(s * angle);\r\n      ctx.lineTo(x + originX, y + originY);\r\n    }\r\n    ctx.clip();\r\n  }\r\n\r\n  async getTriangle(\r\n    canvas,\r\n    hexString,\r\n    size,\r\n    particleRelativeSize,\r\n    particleCount,\r\n    outline\r\n  ) {\r\n    //let ctx = canvas.getContext(\"2d\");\r\n    var altCanvas = document.createElement(\"canvas\");\r\n    altCanvas.height = size * 2;\r\n    altCanvas.width = size * 2;\r\n    var ctx = canvas.getContext(\"2d\");\r\n\r\n    // Debug: Clear the canvas\r\n    //ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    ctx.save();\r\n    this.drawShape(\r\n      ctx,\r\n      \"red\",\r\n      size,\r\n      3,\r\n      this.CANVAS_MAX_X / 2,\r\n      this.CANVAS_MAX_Y / 2\r\n    );\r\n    ctx.globalCompositeOperation = \"source-atop\";\r\n\r\n    //console.log(\"HEX\", hexString, Utils.hexToBinary(hexString));\r\n\r\n    for (let shapeNumber = 0; shapeNumber < particleCount; shapeNumber++) {\r\n      const USED_BITS = 16;\r\n      const shift = 1 * shapeNumber; // I stopped caring that every bit was unique\r\n\r\n      let hash = Utils.hexToBinary(hexString);\r\n      let colorBitsNeeded = Math.floor(Math.log2(COLORS.length));\r\n      if (colorBitsNeeded !== Math.log2(COLORS.length)) {\r\n        console.warn(\r\n          \"WARNING: The color array length isn't a power of 2, some colors wont be used\"\r\n        );\r\n      }\r\n\r\n      let color =\r\n        COLORS[parseInt(hash.substring(shift + 0, shift + colorBitsNeeded), 2)];\r\n      let shape =\r\n        SHAPES[\r\n          parseInt(\r\n            hash.substring(\r\n              shift + colorBitsNeeded + 1,\r\n              shift + colorBitsNeeded + 4\r\n            ),\r\n            2\r\n          )\r\n        ];\r\n      let xLoc =\r\n        (Math.floor(parseInt(hash.substring(shift + 8, shift + 18), 2)) /\r\n          Math.pow(2, 10)) *\r\n          size *\r\n          2 +\r\n        this.CANVAS_MAX_X / 2 -\r\n        size;\r\n      let yLoc =\r\n        (Math.floor(parseInt(hash.substring(shift + 18, shift + 28), 2)) /\r\n          Math.pow(2, 10)) *\r\n          size *\r\n          2 +\r\n        this.CANVAS_MAX_Y / 2 -\r\n        size;\r\n      //console.log(shape, xLoc, yLoc);\r\n\r\n      this.drawShape(\r\n        ctx,\r\n        outline ? \"black\" : color,\r\n        size * particleRelativeSize,\r\n        shape,\r\n        xLoc,\r\n        yLoc,\r\n        outline,\r\n        this.THICKNESS\r\n      );\r\n    }\r\n    ctx.restore();\r\n\r\n    // Save tri as image\r\n    let imgDataUrl = canvas.toDataURL(\"image/webp\", 1);\r\n    let img = new Image();\r\n    await new Promise(r => (img.onload = r), (img.src = imgDataUrl));\r\n\r\n    // Clear the canvas\r\n    //ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    return img;\r\n  }\r\n\r\n  drawTriangle(ctx, img, x, y, angle, flip) {\r\n    ctx.save();\r\n\r\n    // Mirror if requested\r\n    if (flip) {\r\n      ctx.scale(1, -1);\r\n      ctx.translate(0, -this.CANVAS_MAX_Y);\r\n      y = -y;\r\n    }\r\n\r\n    // Draw at location\r\n    ctx.translate(x, y);\r\n\r\n    // Rotate at origin\r\n    let mod = -2;\r\n    ctx.translate(-this.CANVAS_MAX_X / mod, -this.CANVAS_MAX_Y / mod);\r\n    ctx.rotate(angle);\r\n    ctx.translate(this.CANVAS_MAX_X / mod, this.CANVAS_MAX_Y / mod);\r\n\r\n    // Do the drawing!\r\n    ctx.drawImage(img, 0, 0);\r\n\r\n    // Leave everything like we found it\r\n    ctx.restore();\r\n  }\r\n\r\n  async onMountOrUpdate() {\r\n    // Update resolution based on quality input\r\n    this.CANVAS_MAX_X = DISPLAY_MAX_X * this.props.quality;\r\n    this.CANVAS_MAX_Y = DISPLAY_MAX_Y * this.props.quality;\r\n    this.THICKNESS = 5 * this.props.quality;\r\n\r\n    let canvas = this.canvasRef.current;\r\n    if (canvas && canvas.getContext) {\r\n      const size = 80 * this.props.quality;\r\n      let base64String = this.props.hash; //(Math.random() + 1).toString(36).substring(7);\r\n\r\n      let ctx = canvas.getContext(\"2d\");\r\n\r\n      // Clear the canvas\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      this.drawColoringPage(canvas, base64String, size, this.props.color);\r\n      // TODO: this is not working on any browsers, but it should work on at least a few.\r\n      /*\r\n      if (this.props.color) {\r\n        ctx.save();\r\n        ctx.globalCompositeOperation = \"darker\";\r\n        this.drawColoringPage(canvas, base64String, size, false);\r\n        ctx.restore();\r\n      }*/\r\n    }\r\n  }\r\n\r\n  async drawColoringPage(canvas, base64String, size, color) {\r\n    console.log(\"DRAWING\", base64String);\r\n    let ctx = canvas.getContext(\"2d\");\r\n\r\n    let tri = await this.getTriangle(\r\n      canvas,\r\n      Utils.base64ToHex(base64String),\r\n      size + 1,\r\n      0.5,\r\n      128,\r\n      !color\r\n    );\r\n    ///*\r\n    ctx.translate(-canvas.width / 2, -canvas.height / 2);\r\n    const P2 = 2 * Math.PI;\r\n\r\n    // https://docs.google.com/spreadsheets/d/1MDUV0UjwIbVSi0c-AKLsLJ3QY4aaoHlQI0AUA2YqhhU/edit#gid=0\r\n    const A = Math.cos(1.0472) * size;\r\n    const B = Math.sin(1.0472) * size;\r\n    const C = A * 3; // C\r\n\r\n    // Draw all the triangles!\r\n    const HEIGHT_LAYERS = 7;\r\n    const WIDTH_LAYERS = 12;\r\n    for (let y = -1; y < HEIGHT_LAYERS; y++) {\r\n      for (let x = -1; x < WIDTH_LAYERS; x++) {\r\n        let invert = (x + y) % 2 === 0 ? false : true;\r\n        let rot = x % 3;\r\n        this.drawTriangle(\r\n          ctx,\r\n          tri,\r\n          B * x,\r\n          C * y + (invert ? A : 0),\r\n          P2 * (rot / 3),\r\n          invert\r\n        );\r\n      }\r\n    }\r\n    ctx.translate(canvas.width / 2, canvas.height / 2);\r\n    /*\r\n      // Level 0\r\n      this.drawTriangle(ctx, tri, 0, 0, P2 * (0 / 3), false);\r\n\r\n      // Level 1\r\n      this.drawTriangle(ctx, tri, 0, -C + A, P2 * (0 / 3), true);\r\n      this.drawTriangle(ctx, tri, B, A, P2 * (1 / 3), true);\r\n      this.drawTriangle(ctx, tri, -B, A, P2 * (2 / 3), true);\r\n\r\n      // Level 3\r\n      this.drawTriangle(ctx, tri, B, -C, P2 * (1 / 3), false);\r\n      this.drawTriangle(ctx, tri, -B, -C, P2 * (2 / 3), false);\r\n\r\n      this.drawTriangle(ctx, tri, -B * 2, 0, P2 * (1 / 3), false);\r\n      this.drawTriangle(ctx, tri, B * 2, 0, P2 * (2 / 3), false);\r\n\r\n      this.drawTriangle(ctx, tri, -B, C, P2 * (2 / 3), false);\r\n      this.drawTriangle(ctx, tri, B, C, P2 * (1 / 3), false);\r\n\r\n      // Level 4\r\n      this.drawTriangle(ctx, tri, B, -C * 2 + A, P2 * (1 / 3), true);\r\n      this.drawTriangle(ctx, tri, -B, -C * 2 + A, P2 * (2 / 3), true);\r\n\r\n      this.drawTriangle(ctx, tri, B * 2, -C + A, P2 * (2 / 3), true);\r\n      this.drawTriangle(ctx, tri, -B * 2, -C + A, P2 * (1 / 3), true);\r\n\r\n      this.drawTriangle(ctx, tri, B * 3, A, P2 * (0 / 3), true);\r\n      this.drawTriangle(ctx, tri, -B * 3, A, P2 * (0 / 3), true);\r\n\r\n      this.drawTriangle(ctx, tri, -B * 2, C + A, P2 * (1 / 3), true);\r\n      this.drawTriangle(ctx, tri, 0, C + A, P2 * (0 / 3), true);\r\n      this.drawTriangle(ctx, tri, B * 2, C + A, P2 * (2 / 3), true);\r\n\r\n      // Level 5\r\n      this.drawTriangle(ctx, tri, -B * 2, -C * 2, P2 * (1 / 3), false);\r\n      this.drawTriangle(ctx, tri, 0, -C * 2, P2 * (0 / 3), false);\r\n      this.drawTriangle(ctx, tri, B * 2, -C * 2, P2 * (2 / 3), false);\r\n\r\n      this.drawTriangle(ctx, tri, -B * 3, -C, P2 * (0 / 3), false);\r\n      this.drawTriangle(ctx, tri, B * 3, -C, P2 * (0 / 3), false);\r\n\r\n      this.drawTriangle(ctx, tri, -B * 4, 0, P2 * (2 / 3), false);\r\n      this.drawTriangle(ctx, tri, B * 4, 0, P2 * (1 / 3), false);\r\n\r\n      this.drawTriangle(ctx, tri, -B * 3, C, P2 * (0 / 3), false);\r\n      this.drawTriangle(ctx, tri, B * 3, C, P2 * (0 / 3), false);\r\n\r\n      this.drawTriangle(ctx, tri, -B * 2, C * 2, P2 * (1 / 3), false);\r\n      this.drawTriangle(ctx, tri, 0, C * 2, P2 * (0 / 3), false);\r\n      this.drawTriangle(ctx, tri, B * 2, C * 2, P2 * (2 / 3), false);\r\n\r\n      // Level 6\r\n      this.drawTriangle(ctx, tri, -B * 2, -C * 3 + A, P2 * (1 / 3), true);\r\n      this.drawTriangle(ctx, tri, 0, -C * 3 + A, P2 * (0 / 3), true);\r\n      this.drawTriangle(ctx, tri, B * 2, -C * 3 + A, P2 * (2 / 3), true);\r\n\r\n      this.drawTriangle(ctx, tri, -B * 3, -C * 2 + A, P2 * (0 / 3), true);\r\n      this.drawTriangle(ctx, tri, B * 3, -C * 2 + A, P2 * (0 / 3), true);\r\n\r\n      this.drawTriangle(ctx, tri, -B * 4, -C + A, P2 * (2 / 3), true);\r\n      this.drawTriangle(ctx, tri, B * 4, -C + A, P2 * (1 / 3), true);\r\n\r\n      this.drawTriangle(ctx, tri, -B * 5, A, P2 * (1 / 3), true);\r\n      this.drawTriangle(ctx, tri, B * 5, A, P2 * (2 / 3), true);\r\n\r\n      this.drawTriangle(ctx, tri, -B * 4, C + A, P2 * (2 / 3), true);\r\n      this.drawTriangle(ctx, tri, B * 4, C + A, P2 * (1 / 3), true);\r\n\r\n      this.drawTriangle(ctx, tri, -B * 3, C * 2 + A, P2 * (0 / 3), true);\r\n      this.drawTriangle(ctx, tri, -B, C * 2 + A, P2 * (2 / 3), true);\r\n      this.drawTriangle(ctx, tri, B, C * 2 + A, P2 * (1 / 3), true);\r\n      this.drawTriangle(ctx, tri, B * 3, C * 2 + A, P2 * (0 / 3), true);\r\n      */\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.onMountOrUpdate();\r\n  }\r\n\r\n  async componentDidUpdate() {\r\n    this.onMountOrUpdate();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <canvas\r\n          id=\"canvas\"\r\n          ref={this.canvasRef}\r\n          width={this.CANVAS_MAX_X}\r\n          height={this.CANVAS_MAX_Y}\r\n          style={{\r\n            border: \"black\",\r\n            borderStyle: \"solid\",\r\n            borderWidth: \"1px\",\r\n            borderRadius: \"3px\",\r\n            marginRight: \"4px\",\r\n            width: DISPLAY_MAX_X,\r\n            height: DISPLAY_MAX_Y,\r\n          }}\r\n        ></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default KaleidoscopeColoring;\r\n"],"names":["CryptoJS","module","exports","Math","undefined","crypto","window","self","globalThis","msCrypto","g","err","cryptoSecureRandomInt","getRandomValues","Uint32Array","randomBytes","readInt32LE","Error","create","Object","F","obj","subtype","prototype","C","C_lib","lib","Base","extend","overrides","this","mixIn","hasOwnProperty","init","$super","apply","arguments","instance","properties","propertyName","toString","clone","WordArray","words","sigBytes","length","encoder","Hex","stringify","concat","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","i","thatByte","j","ceil","call","slice","random","nBytes","push","C_enc","enc","hexChars","bite","join","parse","hexStr","hexStrLength","parseInt","substr","Latin1","latin1Chars","String","fromCharCode","latin1Str","latin1StrLength","charCodeAt","Utf8","decodeURIComponent","escape","e","utf8Str","unescape","encodeURIComponent","BufferedBlockAlgorithm","reset","_data","_nDataBytes","_append","data","_process","doFlush","processedWords","dataWords","dataSigBytes","blockSize","nBlocksReady","nWordsReady","max","_minBufferSize","nBytesReady","min","offset","_doProcessBlock","splice","C_algo","Hasher","cfg","_doReset","update","messageUpdate","finalize","_doFinalize","_createHelper","hasher","message","_createHmacHelper","key","HMAC","algo","parseLoop","base64Str","base64StrLength","reverseMap","bitsCombined","Base64","map","_map","base64Chars","triplet","charAt","paddingChar","_reverseMap","paddingIndex","indexOf","H","K","isPrime","n","sqrtN","sqrt","factor","getFractionalBits","nPrime","pow","W","SHA256","_hash","M","a","b","c","d","f","h","gamma0x","gamma0","gamma1x","gamma1","maj","sigma0","t1","nBitsTotal","nBitsLeft","floor","HmacSHA256","$","global","COLORS","SHAPES","KaleidoscopeColoring","props","canvasRef","React","CANVAS_MAX_X","quality","CANVAS_MAX_Y","THICKNESS","drawShape","ctx","color","distance","sides","originX","originY","outline","thickness","beginPath","angle","PI","s","x","sin","y","cos","lineTo","fillStyle","fill","clipShape","clip","getTriangle","canvas","hexString","size","particleRelativeSize","particleCount","altCanvas","document","createElement","height","width","getContext","save","globalCompositeOperation","shapeNumber","shift","hash","Utils","colorBitsNeeded","log2","console","warn","substring","shape","xLoc","yLoc","restore","imgDataUrl","toDataURL","img","Image","Promise","r","onload","src","drawTriangle","flip","scale","translate","rotate","drawImage","onMountOrUpdate","current","base64String","clearRect","drawColoringPage","log","tri","P2","A","B","invert","rot","componentDidMount","componentDidUpdate","render","style","display","alignItems","id","ref","border","borderStyle","borderWidth","borderRadius","marginRight","Component"],"sourceRoot":""}